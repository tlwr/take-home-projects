// Code generated by counterfeiter. DO NOT EDIT.
package fake_shakespeare

import (
	"sync"

	"github.com/tlwr/take-home-projects/truelayer/internal/shakespeare"
)

type FakeShakespeareClient struct {
	TranslateStub        func(string) (string, error)
	translateMutex       sync.RWMutex
	translateArgsForCall []struct {
		arg1 string
	}
	translateReturns struct {
		result1 string
		result2 error
	}
	translateReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeShakespeareClient) Translate(arg1 string) (string, error) {
	fake.translateMutex.Lock()
	ret, specificReturn := fake.translateReturnsOnCall[len(fake.translateArgsForCall)]
	fake.translateArgsForCall = append(fake.translateArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.TranslateStub
	fakeReturns := fake.translateReturns
	fake.recordInvocation("Translate", []interface{}{arg1})
	fake.translateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeShakespeareClient) TranslateCallCount() int {
	fake.translateMutex.RLock()
	defer fake.translateMutex.RUnlock()
	return len(fake.translateArgsForCall)
}

func (fake *FakeShakespeareClient) TranslateCalls(stub func(string) (string, error)) {
	fake.translateMutex.Lock()
	defer fake.translateMutex.Unlock()
	fake.TranslateStub = stub
}

func (fake *FakeShakespeareClient) TranslateArgsForCall(i int) string {
	fake.translateMutex.RLock()
	defer fake.translateMutex.RUnlock()
	argsForCall := fake.translateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeShakespeareClient) TranslateReturns(result1 string, result2 error) {
	fake.translateMutex.Lock()
	defer fake.translateMutex.Unlock()
	fake.TranslateStub = nil
	fake.translateReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeShakespeareClient) TranslateReturnsOnCall(i int, result1 string, result2 error) {
	fake.translateMutex.Lock()
	defer fake.translateMutex.Unlock()
	fake.TranslateStub = nil
	if fake.translateReturnsOnCall == nil {
		fake.translateReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.translateReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeShakespeareClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.translateMutex.RLock()
	defer fake.translateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeShakespeareClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ shakespeare.ShakespeareClient = new(FakeShakespeareClient)
